@model WebManagementApp.Models.ManageUserVM
@{
    ViewData["Title"] = "Manage User";
}

@if (ViewBag.ErrorMessage != null)
{
    <div class="alert alert-danger alert-dismissible fade show" id="alertMessage" role="alert">
        @ViewBag.ErrorMessage
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

@if (ViewBag.SuccessMessage != null)
{
    <div class="alert alert-success alert-dismissible fade show" id="alertMessage" role="alert">
        @ViewBag.SuccessMessage
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

@section Styles {
    <style>
        .table-overlay {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(255, 255, 255, 0.8);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }

        @@media screen and (max-width: 725px) {
            .positionrow {
                position: absolute !important;
            }
        }

        @@media screen and (max-width: 820px) { 
            .btnEdit {
                margin-bottom: 6px !important;
            }
        }

        table thead {
            position: sticky;
            top: 60px;
            z-index: 1;
        }
    </style>
    <style>
        .passwordSpan {
            position: relative;
            cursor: pointer;
        }

        .tooltip {
            visibility: hidden;
            background-color: #333;
            color: #fff;
            text-align: center;
            border-radius: 5px;
            padding: 5px;
            position: absolute;
            top: -30px;
            left: 50%;
            transform: translateX(-50%);
            opacity: 0;
            transition: opacity 0.3s;
            font-size: 12px;
            white-space: nowrap;
        }

        .passwordSpan.copied .tooltip {
            visibility: visible;
            opacity: 1;
        }

        @@media screen and (max-width: 610px) {
            .modal-dialog-centered {
                display: contents !important;
            }

            #verticalycentered {
                padding-right: 0px !important;
            }

            #passwordChangedModel {
                padding-right: 0px !important;
            }

            .table-overlay {
                width: 570px !important;
            }
        }

        @@media screen and (max-width: 725px) and (min-width: 610px) {
            .table-overlay {
                width: 570px !important;
            }
        }
        .modal-backdrop.show {
            background-color: rgba(0, 0, 0, 0.7) !important;
            height: 100% !important;
            width: 100% !important;
        }

        .custom-tooltip {
            position: absolute;
            background-color: #333;
            color: #fff;
            padding: 5px;
            border-radius: 3px;
            font-size: 12px;
            white-space: nowrap;
            z-index: 1000;
            pointer-events: none; /* Ensure tooltip does not block clicks */
        }

        .position-relative {
            position: relative; /* To position the tooltip correctly within the input group */
        }

        .tooltip {
            visibility: hidden; /* Hidden by default */
            opacity: 0; /* Fully transparent */
            transition: opacity 0.3s ease; /* Smooth transition for showing/hiding */
            position: absolute; /* Positioning the tooltip absolutely */
            bottom: 100%; /* Position above the button */
            left: 93%; /* Center horizontally */
            transform: translateX(-50%) translateY(-5px); /* Center and adjust above */
            background-color: #333; /* Tooltip background color */
            color: #fff; /* Tooltip text color */
            padding: 5px 10px; /* Padding for tooltip */
            border-radius: 4px; /* Rounded corners */
            font-size: 12px; /* Font size */
            z-index: 10; /* Layer above other content */
            white-space: nowrap; /* Prevent wrapping */
        }

        .show-tooltip .tooltip {
            visibility: visible; /* Make tooltip visible */
            opacity: 1; /* Fully opaque */
        }

        .datatable-top{
            text-align : left !important;
        }


    </style>
}
<div class="positionrow">
    <div class="card ">
        <div class="card-body mt-2">
            <!-- Table  -->
            <table id="manageUser-table" class="table">
            </table>

            <div id="table-spinner" class="table-overlay">
                <div class="spinner-border" role="status">
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="verticalycentered" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <form class="needs-validation modelform" id="form_user" novalidate>
                <div class="modal-header">
                    <h5 class="modal-title" id="modal_title">Add User</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="row p-3">
                        <div class="col-md-12 pb-2">
                            <label for="yourName" class="form-label">Name</label>
                            <input type="text" name="Name" class="form-control" for="Name" id="modal_Name" required>
                            <div class="invalid-feedback">Please enter a Name.</div>
                        </div>
                        <div class="col-md-12 pb-2">
                            <label for="yourEmail" class="form-label">Email</label>
                            <input type="email" name="email" class="form-control" for="Email" id="modal_email" required>
                            <div class="invalid-feedback">Please enter a valid email address.</div>
                        </div>

                        <div class="col-md-12 pb-2">
                            <label for="yourPassword" class="form-label">Password</label>
                            <input type="password" name="password" for="Password" class="form-control" id="modal_password" required>
                            <div class="invalid-feedback"> Please enter a password.</div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" id="modal_user_submit">Save</button>
                </div>
            </form>
        </div>
    </div>
</div>

<div class="modal fade" id="passwordChangedModel" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <form class="needs-validation modelform" id="form_user_update" novalidate>
                <div class="modal-header">
                    <h5 class="modal-title" id="modal_title">Update User</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="row p-3">
                        <div class="col-md-12 pb-2">
                            <label for="yourNme" class="form-label">Name</label>
                            <div class="input-group mb-3">
                                <input type="text" name="Name" class="form-control" for="Name" id="modalname" required>
                                <span class="input-group-text" data-type="text" onclick="copyDataToClipboard(this)" title="Click to copy Name">
                                    <span class="tooltip">Copied!</span> <i class="bi bi-copy"></i>
                                </span>
                                <div class="invalid-feedback">Please enter a Name.</div>
                            </div>
                        </div>
                        <div class="col-md-12 pb-2">
                            <label for="yourEmail" class="form-label">Email</label>
                            <div class="input-group mb-3">
                                <input type="email" name="email" class="form-control" for="Email" id="modalemail" required>
                                <span class="input-group-text" data-type="email" onclick="copyDataToClipboard(this)" title="Click to copy email">
                                    <span class="tooltip">Copied!</span> <i class="bi bi-copy"></i>
                                </span>
                                <div class="invalid-feedback">Please enter a valid email address.</div>
                            </div>
                        </div>
                        <div class="col-md-12 pb-2">
                            <label for="yourPassword" class="form-label">Password</label>
                            <div class="input-group mb-3">
                                <input type="password" name="password" for="Password" class="form-control" id="modalpassword" required>
                                <span class="input-group-text" data-type="password" onclick="copyDataToClipboard(this)" title="Click to copy password">
                                    <span class="tooltip">Copied!</span><i class="bi bi-copy"></i>
                                </span>
                                <div class="invalid-feedback"> Please enter a password.</div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" id="modal_user_Update">Update</button>
                </div>
            </form>
        </div>
    </div>
</div>
@section Scripts {

    <script>

        let _manageUserId = null;//idUser
        let _ManageUserDatatable = null;
        let _ManageUserData = null;
        let _userData = null;

        // Page load
        $(document).ready(function () {
            GetManageUserData();

            setTimeout(function () {
                $("#alertMessage").fadeOut();
            }, 5000);
        });

        function GetManageUserData() {

            $.ajax({
                type: "GET",
                url: "@Url.Action("GetManageUserData", "ManageUser")",
                dataType: "json",
                success: function (response) {
                    
                    if (response.error) {
                        toastr.error(response.message);
                    } else {

                        GenerateManageUserTable(response.result);
                    }
                    $('#table-spinner').addClass('d-none');
                },
                error: function (error) {
                    $('#table-loading-spinner').addClass('d-none');
                    toastr.error('Error fetching data: ' + error.responseText);
                }
            });
        }
        function GenerateManageUserTable(data) {
            // Convert data to the format required by Simple-DataTables
            _ManageUserData = data.map((row, index) => [
                row.idUser,
                row.password,
                `<span id="${row.idUser}" pass="${row.password}">${index + 1}</span>`,
                row.name ? row.name:'',
                row.email ? row.email : '',
                row.dateAdd ? formatDateTime(row.dateAdd) : '',
                row.lastLoginTime ? formatDateTime(row.lastLoginTime) : '', 
                `<div class="btn-group" role="group" aria-label="Product Actions">
                  <button class="btn btn-primary btnEdit" title="Edit User" data-id='${row.idUser}' data-email='${row.email}'
                     data-pass='${row.password}'>
                     <i class="bi bi-pencil-square edit"></i></button>
                 </div>
                 <div class="btn-group" role="group" aria-label="Product Actions">
                           <button type="button" class="btn btn-danger removeuser" id="${row.idUser}" data-bs-toggle="tooltip"
                      data-bs-placement="bottom" data-bs-original-title="Remove" onclick="removeUser(this.id)" title="Remove">
                      <i class="bi bi-trash custom-icon"></i>
                   </button>
                </div>`
            ]);

            _ManageUserDatatable = new simpleDatatables.DataTable($('#manageUser-table')[0], {
                data: {
                    headings: ["#","Name" ,"Email", "DateAdd", "LastActivityDate", "Action"],
                    data: _ManageUserData.map(row => [row[2],row[3] ,row[4], row[5], row[6], row[7]])
                },
                rowRender: (rowValue, tr, _index) => {
                    if (!tr.attributes) {
                        tr.attributes = {}
                    }
                    tr.attributes["data-userid"] = _ManageUserData[_index][0];

                    // const currentUserData = _ManageUserData[_index];
                    // tr.setAttribute("data-userid", currentUserData[0]);  // idUser
                    // tr.setAttribute("data-email", currentUserData[1]);   // Email
                    // tr.setAttribute("data-pass", currentUserData[2]);    // Password

                    return tr
                },
                perPage: 20,  // Set the default number of records per page
                perPageSelect: [20, 40, 60],
                columns: [
                    {
                        select: 5,
                        sortable: false,
                    }
                ],

            });

            //
            var searchDiv = document.querySelector(".datatable-search");
            var button = document.createElement("button");
            button.innerText = "Export Excel";
            button.type = "button";
            button.id = "export-excel-button";
            button.className = "btn btn-secondary";
            button.style.marginBottom = "3px";
            button.onclick = function () {
                const heading = ["#","Name" ,"Email", "DateAdd", "LastActivityDate"];

                //Set column indexes as per the productTableData headings
                const columnIndexes = {
                    SrNo: 1,
                    Name: 2,
                    Email: 3,
                    DateAdd: 4,
                    LastLoginTime: 5,
                };

                let excelData = [];
                if (_ManageUserDatatable.totalPages > 0) {
                    const indexes = Object.values(columnIndexes).map(index => index - 1); // Convert to zero-based indexes

                    excelData = _ManageUserDatatable.pages.map(group =>
                        group.map(item =>
                            item.row.cells
                                .map(cell => cell.text)
                                .filter((_, cellIndex) => indexes.includes(cellIndex)) // Select only the desired columns
                        )
                    ).flat();
                }

                // Get table data
                let combinedArray = [heading, ...excelData];

                // Create a new workbook and append a new sheet
                const wb = XLSX.utils.book_new();
                const ws = XLSX.utils.aoa_to_sheet(combinedArray);
                XLSX.utils.book_append_sheet(wb, ws, 'Sheet1');

                // Write the workbook to binary format
                const wbout = XLSX.write(wb, { bookType: 'xlsx', type: 'binary' });
                saveAs(new Blob([s2ab(wbout)], { type: "application/octet-stream" }), 'ManageUser.xlsx');
            };
            searchDiv.appendChild(button);

            var addButton = document.createElement("button");
            addButton.innerText = "Add";
            addButton.type = "button";
            addButton.title = "Add User"
            addButton.id = "mapping_add_button";
            addButton.className = "btn btn-primary";
            addButton.style.marginBottom = "3px";
            addButton.style.marginLeft = "5px";
            addButton.onclick = function () {   //Open modal on add button click

                document.getElementById('modal_title').innerHTML = 'Add User';

                document.getElementById("modal_password").value = '';
                document.getElementById("modal_password").disabled = false;
                document.getElementById("modal_email").value = '';
                document.getElementById("modal_email").disabled = false;
                const myModal = new bootstrap.Modal(document.getElementById('verticalycentered'));
                
                myModal.show();
            };

            searchDiv.appendChild(addButton);

            // Event listener for edit user button
            $(document).off('click', '.btnEdit').on('click', '.btnEdit', function () {

                let id = $(this).closest('tr').find('td').eq(0).find('span').attr('id');
                let password = $(this).closest('tr').find('td').eq(0).find('span').attr('pass');
                let Name = $(this).closest('tr').find('td').eq(1).text().trim();
                let email = $(this).closest('tr').find('td').eq(2).text().trim();
               
                // var id = $(this).data('id');
                // var email = $(this).data('email');
                // var password = $(this).data('pass');

                handleProductEdit(id,Name, email, password);  // Call function to user edit
            });
        }
        
        // ---------------------- Add - Update User -------------------------------------------
        let _IsAnyRecordDeleted = false;
        let _IsAnyRecordInserted = false;
        let _IsAnyRecordUpdated = false;
        let selectedEmail = null;
        let selectedUserId = null;

        // Update table data when modal is closed and sku is deleted from modal list
        document.getElementById('passwordChangedModel').addEventListener('hidden.bs.modal', function () {
            selectedEmail = null;

            const formUserUpdate = document.querySelector('#form_user_update');
            formUserUpdate.classList.remove('was-validated');
            formUserUpdate.reset();

            if (_IsAnyRecordUpdated) {
                if (_ManageUserDatatable) {
                    _ManageUserDatatable.destroy();
                }
                GenerateManageUserTable(_userData);
            }
        });
    
        //Add user moddel// Update table data when modal is closed and sku is deleted from modal list
        document.getElementById('verticalycentered').addEventListener('hidden.bs.modal', function () {
            const formMapping = document.querySelector('#form_user');
            formMapping.classList.remove('was-validated');
            formMapping.reset();

            if (_IsAnyRecordInserted) {
                if (_ManageUserDatatable) {
                    _ManageUserDatatable.destroy();
                }
                GenerateManageUserTable(_userData);
            }
        });
        document.addEventListener('DOMContentLoaded', function () {
            selectedEmail = null;
            // Page form submission validation
            const formUser = document.querySelector('#form_user');

            formUser.addEventListener('submit', function (event) {
                if (!formUser.checkValidity()) {
                    event.preventDefault();
                    event.stopPropagation();
                }
                formUser.classList.add('was-validated');
            }, false);

            // Mapping modal form submission validation
            const formMapping = document.querySelector('#form_user');
            const submitButton = document.getElementById('modal_user_submit');

            submitButton.addEventListener('click', (event) => {
                event.preventDefault();
                event.stopPropagation();

                if (!formMapping.checkValidity()) {
                    formMapping.classList.add('was-validated');
                } else {
                    AddUser();
                    formMapping.classList.remove('was-validated');
                }
            });

        }, false);


        function AddUser() {
            let name = "";
            let email = "";
            let password = "";

            if (!selectedEmail) { // Add user
                name = document.getElementById("modal_Name").value.trim();
                 email = document.getElementById("modal_email").value.trim();
                 password = document.getElementById("modal_password").value.trim();
                data = { name: name, email: email, password: password };
               
                $.ajax({
                    type: "POST",
                    url: "@Url.Action("AddUser", "ManageUser")",
                    data: data,
                    success: function (response) {

                        if (response.error) {
                            toastr.error(response.message);
                        } else {

                            $('#verticalycentered').modal('hide');
                            toastr.success(response.message);
                            _IsAnyRecordInserted = true;
                            _userData = response.result;
                        }

                    }, error: function (error) {
                        toastr.error('Error fetching data: ' + error.responseText);
                    }
                });
            }
            else{ // Update User

                name = document.getElementById("modalname").value.trim();
                email = document.getElementById("modalemail").value.trim();
                password = document.getElementById("modalpassword").value.trim();
                data = { name: name, email: email, password: password, idUser: selectedUserId };
               
                $.ajax({
                    type: "POST",
                    url: "@Url.Action("UpdateUser", "ManageUser")",
                    data: data,
                    success: function (response) {
                        if (response.error) {
                            toastr.error(response.message);
                        } else {
                            selectedEmail = null;
                            _IsAnyRecordUpdated = true;
                            _userData = response.result;
                            $('#passwordChangedModel').modal('hide');
                            toastr.success(response.message);
                        }
                    }, error: function (error) {
                        toastr.error('Error fetching data: ' + error.responseText);
                    }
                });
            }
        }

        function handleProductEdit(idUser, Name, email, password) {
            if (idUser) {
                selectedUserId = idUser;
                selectedEmail = email;
                document.getElementById("modalpassword").value = password;
                document.getElementById("modalemail").value = email;
                document.getElementById("modalname").value = Name;

                const myModal = new bootstrap.Modal(document.getElementById('passwordChangedModel'));
                myModal.show();
            }
        }

        // Update user model
        document.addEventListener('DOMContentLoaded', function () {

            // Page form submission validation
            const formUser = document.querySelector('#form_user_update');

            formUser.addEventListener('submit', function (event) {
                if (!formUser.checkValidity()) {
                    event.preventDefault();
                    event.stopPropagation();
                }
                formUser.classList.add('was-validated');
            }, false);

            // Mapping modal form submission validation
            const formUserUpdate = document.querySelector('#form_user_update');
            const updateButton = document.getElementById('modal_user_Update');

            updateButton.addEventListener('click', (event) => {
                event.preventDefault();
                event.stopPropagation();

                if (!formUserUpdate.checkValidity()) {
                    formUserUpdate.classList.add('was-validated');
                } else {
                    AddUser();
                    formUserUpdate.classList.remove('was-validated');
                }
            });

        }, false);

        // ---------------------- End -------------------------------------------
        // Function to copy either email or password to clipboard and show tooltip
        function copyDataToClipboard(element) {

            // Get the type of the data to copy (email or password)
            const type = element.getAttribute('data-type');
            let textToCopy;
           
            if (type === 'email') {
                textToCopy = document.getElementById('modalemail').value;
            } else if (type === 'password') {
                textToCopy = document.getElementById('modalpassword').value;
            }
            else if (type === 'text') {
                textToCopy = document.getElementById('modalname').value;
            }

            if (textToCopy) {
                // Create a contenteditable div element
                const div = document.createElement('div');
                div.contentEditable = true;
                div.style.position = 'absolute';
                div.style.left = '-9999px'; // Move off-screen
                div.textContent = textToCopy;
                document.body.appendChild(div);

                // Select the content and execute the copy command and clean up the div.
                div.focus();
                document.execCommand('selectAll');
                document.execCommand('copy');
                document.body.removeChild(div);

                element.classList.add('show-tooltip');
                setTimeout(() => {
                    element.classList.remove('show-tooltip');
                }, 3000);
            }
        }

        //Remove
        function removeUser(id){
           
            let data = { idUser: id }

            Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, delete it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    //
                    $.ajax({
                        type: "POST",
                        url: "@Url.Action("DeleteUser", "ManageUser")",
                        data: data,
                        success: function (response) {
                            if (response.error) {
                                Swal.fire(
                                    'Error!',
                                    response.message,
                                    'error'
                                );
                            }
                            else {
                                Swal.fire(
                                    'Deleted!',
                                    response.message,
                                    'success'
                                );
                                _userData = response.result;
                                _IsAnyRecordDeleted = true;

                                if (_IsAnyRecordDeleted) {
                                    if (_ManageUserDatatable) {
                                        _ManageUserDatatable.destroy();
                                    }
                                    GenerateManageUserTable(_userData);
                                }
                            }
                        },
                        error: function (error) {
                            Swal.fire(
                                'Error!',
                                'Failed to delete record.',
                                'error'
                            );
                        }
                    });
                } else if (result.dismiss === Swal.DismissReason.cancel) {
                    Swal.fire({
                        title: 'Cancelled',
                        text: 'Your record is safe :)',
                        icon: 'error',
                        customClass: {
                            confirmButton: 'btn btn-success waves-effect waves-light'
                        }
                    });
                }
            });
        }
        
        // Function to extract text from HTML
        function extractTextFromHTML(htmlString) {
           
            const tempDiv = document.createElement('div');
            tempDiv.innerHTML = htmlString;
            // Find the span that contains the actual password (hidden span)
            const hiddenPasswordSpan = tempDiv.querySelector('span[style="display:none;"]');
            if (hiddenPasswordSpan) {
                return hiddenPasswordSpan.textContent.trim(); // Extract password from hidden span
            }
            // Assuming the email or password is the only text node directly inside the first child
            const firstChild = tempDiv.firstChild;
            let extractedText = '';

            if (firstChild && firstChild.nodeType === Node.ELEMENT_NODE) {
                const textNodes = Array.from(firstChild.childNodes).filter(node => node.nodeType === Node.TEXT_NODE);

                if (textNodes.length > 0) {
                    extractedText = textNodes[0].textContent.trim();
                }
            }
            return extractedText; // Return the trimmed text content
        }
        // Formatting function
        function formatDateTime(dateString) {
            if (!dateString) {
                return '';
            }
            const date = new Date(dateString);

            // Define options for formatting date
            const dateOptions = {
                day: '2-digit',
                month: '2-digit',
                year: 'numeric'
            };

            // Format date
            const formattedDate = new Intl.DateTimeFormat('en-GB', dateOptions).format(date); // 'DD/MM/YYYY'

            return formattedDate;
        }

        // Utility function to convert data to array buffer
        function s2ab(s) {
            const buf = new ArrayBuffer(s.length);
            const view = new Uint8Array(buf);
            for (let i = 0; i < s.length; i++) {
                view[i] = s.charCodeAt(i) & 0xff;
            }
            return buf;
        }
    </script>
}
