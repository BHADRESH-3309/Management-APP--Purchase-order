@model WebManagementApp.Models.MappingSkuVM
@{
    ViewData["Title"] = "SKU Mapping";
}
@{
    var showSkuBaseUrl = Url.Action("Index", "MasterInventory");
}
@section Styles
{
    <style>
        .title {
            max-width: 300px;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .mappingsku {
            max-width: 450px;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        @@media screen and (max-width: 1400px) {
            .mappingsku, .title {
                max-width: 260px;
            }
        }

        @@media screen and (max-width: 608px) {
            .modal-dialog-centered{
                display: contents !important;
            }
        }

        @@media screen and (max-width: 767px) {
            .positionrow {
                position: absolute !important;
            }

            .title {
                max-width: 200px;
            }

            .mappingsku {
                max-width: 120px;
            }
        }

        .table-overlay {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(255, 255, 255, 0.8);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }

        #simple-table th:first-child,
        #simple-table td:first-child {
            width: 5% !important;
        }

        #simple-table th:nth-child(2),
        #simple-table td:nth-child(2) {
            width: 20% !important;
        }

        #simple-table th:nth-child(3),
        #simple-table td:nth-child(3) {
            width: 30% !important;
        }

        #simple-table th:nth-child(4),
        #simple-table td:nth-child(4) {
            width: 40% !important;
        }

/*         #simple-table th:nth-child(5),
        #simple-table td:nth-child(5) {
            width: 5% !important;
        } */


        .modal-backdrop {
            width: 100% !important; 
            height: 100% !important;
            left: 0 !important;
            right: 0 !important;
        }

        table thead {
            position: sticky;
            top: 62px;
            z-index: 1;
        }
    </style>
}

@if (Model != null)
{
    if (Model.IsError && !string.IsNullOrEmpty(Model.Message))
    {
        <div class="alert alert-danger alert-dismissible fade show mt-2" id="alertMessage" role="alert">
            @Model.Message
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
    else if (!string.IsNullOrEmpty(Model.Message))
    {
        <div class="alert alert-success alert-dismissible fade show mt-2" id="alertMessage" role="alert">
            @* @Model.Message *@
            @Html.Raw(Model.Message)
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
}

<div class="positionrow">

@*     <div class="card">
        <div class="card-body">
            <div class="row" style="padding-top:20px">
                <div class="col-lg-8 mt-2">
                    <form asp-controller="MappingSKU" asp-action="Index" method="post" enctype="multipart/form-data" id="form1" class="row needs-validation">
                        <div class="row">
                            <label for="inputFile" class="col-sm-3 col-form-label">Upload Mapping SKU:</label>
                            <div class="col-sm-6 mb-2">
                                <input asp-for="MappingSkuFileModel.File" class="form-control" accept=".xlsx,.xls" type="file" id="formFile" required>
                                <div class="invalid-feedback">
                                    Upload mapping sku excel file is required.
                                </div>
                            </div>
                            <div class="col-sm-3 mb-2">
                                <button type="submit" class="btn btn-primary">Submit File</button>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="col-lg-4 mt-2">
                    <div class="row">
                        <div class="col-12">

                            <label style="margin-right: 20px;">Mapping SKU Upload Sample File:</label>
                            <button class="btn btn-outline-success" id="sample-download-button" type="submit">Download</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div> *@


    <div class="card">
        <div class="card-body mt-2">
            <!-- Table with stripped rows -->
            <table id="simple-table" class="table">
            </table>

            <div id="table-loading-spinner" class="table-overlay">
                <div class="spinner-border" role="status">
                </div>
            </div>
        </div>
    </div>

</div>


@* <div class="modal fade" id="verticalycentered" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <form class="needs-validation modelform" id="form_mapping" novalidate>
                <div class="modal-header">
                    <h5 class="modal-title" id="modal_title">Add Marketplace SKU</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">

                    <div class="card">
                        <div class="row p-3">
                            <div class="col-md-12 pb-2">
                                <label for="MasterSKU" class="form-label">Master SKU:*</label>
                                <input type="text" class="typeahead_mastersku form-control" for="MasterSKU" id="modal_master_sku" placeholder="Enter Master SKU" autocomplete="off" required>
                                <div class="invalid-feedback" id="modal_master_sku_validation">
                                    Please enter the master sku.
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="card pt-3">
                        <div class="card-body">
                            <div class="table-responsive">
                                <table class="table" id="sku_simple_table">
                                    <tbody>
                                        <tr>
                                            <th>MappingType</th>
                                            <th>SKU</th>
                                            <th>Quantity</th>
                                            <th>Sync On/Off</th>
                                            <th>Action</th>
                                        </tr>
                                        <tr>
                                            <td>
                                                <select class="form-select" style="width:200px">
                                                    <option selected="amazon Greenwize">Amazon Greenwize</option>
                                                    <option value="amazon AVA Supplies">amazon AVA Supplies</option>
                                                    <option value="ebay Greenwize">eBay Greenwize</option>
                                                    <option value="onbuy Greenwize">OnBuy Greenwize</option>
                                                    <option value="shopify Greenwize">Shopify Greenwize</option>
                                                </select>
                                            </td>
                                            <td>SKU</td>
                                            <td>Quantity</td>
                                            <td>Sync On/Off</td>
                                            <td>Button</td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                            <div id="mapping-loading-spinner" class="table-overlay" style="display:none">
                                <div class="spinner-border" role="status">
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" id="modal_master_sku_submit">Save Changes</button>
                </div>
            </form>
        </div>
    </div>
</div> *@


@section Scripts
{
    <script type="module">
        var showSkuBaseUrl = '@showSkuBaseUrl';
        // var myModalEl = document.getElementById('verticalycentered');
        // function setModalSize() {
        //     var modalContent = myModalEl.querySelector('.modal-content');

        //     let scrollableWidth = document.documentElement.scrollWidth;
        //     modalContent.style.width = `${scrollableWidth}px`;
        // }

        // window.addEventListener('resize', function () {
        //     setModalSize();
        // });

        // myModalEl.addEventListener('show.bs.modal', function (event) {
        //     setModalSize();
        // });

        $(document).ready(function () {
            setTimeout(function () {
                $("#alertMessage").fadeOut();
            }, 30000);
        })

        // document.addEventListener('DOMContentLoaded', function () {

        //     // Page form submission validation
        //     var form1 = document.querySelector('#form1.needs-validation');
        //     form1.addEventListener('submit', function (event) {
        //         if (!form1.checkValidity()) {
        //             event.preventDefault();
        //             event.stopPropagation();
        //         }
        //         form1.classList.add('was-validated');
        //     }, false);


        //     // Mapping modal form submission validation
        //     const formMapping = document.querySelector('#form_mapping');
        //     const submitButton = document.getElementById('modal_master_sku_submit');

        //     submitButton.addEventListener('click', (event) => {
        //         event.preventDefault();
        //         event.stopPropagation();

        //         if (!formMapping.checkValidity()) {
        //             formMapping.classList.add('was-validated');
        //         } else {
        //             AddMappingSKU();
        //             formMapping.classList.remove('was-validated');
        //         }
        //     });

        // }, false);

        import { DataTable } from "../assets/vendor/simple-datatables/module.js"

        // Global variables
        // let _MasterSkuId = null;
        let _MasterSkuDatatable = null;
        let _MasterSkuData = [];

        // let _MappingDatatable = null;
        // let _MappingSkuData = [];
        // let _IsAnyRecordDeleted = false;
        // let _IsAnyRecordInserted = false;
        let sku = '';
        let marketSku = '';

        toastr.options = {
            "timeOut": 30000,             // Auto-hide after 30 seconds
            "extendedTimeOut": 30000,     // If user hovers, it will stay 30 more seconds
            "closeButton": true,
            "progressBar": true,
            "tapToDismiss": false         // Keep toast visible even if user clicks it
        };

        $(document).ready(function () {

            const urlParams = new URLSearchParams(window.location.search);
            sku = new URLSearchParams(window.location.search).get('sku');
            marketSku = new URLSearchParams(window.location.search).get('marketSku');

            GetMasterSkuData(sku, marketSku);
        });

        // // Initial call to fetch and display the Master SKU data
        // GetMasterSkuData();

        /**
        * Fetches the Master SKU data from the server
        */

        function GetMasterSkuData(sku, marketSku) {

            $.ajax({
                type: "GET",
                url: "@Url.Action("GetMasterSkuData", "MappingSKU")",
                data: { sku: sku, marketSku: marketSku },
                dataType: "json",
                success: function (response) {
                    if (response.error) {
                        toastr.error(response.message);
                    } else {
                        GenerateMasterSkuTable(response.result);
                    }

                    $('#table-loading-spinner').addClass('d-none');
                },
                failure: handleAjaxError,
                error: handleAjaxError
            });
        }

        /**
        * Handles AJAX errors by logging the response text
        * @@param {Array} result - The AJAX result array
        */
        function handleAjaxError(result) {
            $('#table-loading-spinner').addClass('d-none');
            $('#mapping-loading-spinner').hide();
            console.error(result.responseText);
        }

        /**
        * Generates the DataTable for mapping SKU data
        * @@param {Array} data - The mapping SKU data
        */
        function GenerateMasterSkuTable(data) {
            if (_MasterSkuDatatable) {
                _MasterSkuDatatable.destroy();
            }
            const idMasterSKUData = data.map(row => [row.idMasterSKU, row.masterSKU]);
            _MasterSkuData = data.map((row, index) => {

                const mappingSKUs = row.mappingSKU?.split(',') || [];
                const salesChannels = row.salesChannel?.split(',') || [];

                const formattedMappingSKUs = mappingSKUs.map((sku, i) =>
                    `${sku.trim()} (${(salesChannels[i] || '').trim()})`
                ).join(', ');

                return [index + 1, row.masterSKU, row.title, formattedMappingSKUs]
            });

            const marketplaceIcons = {
                amazongreenwize: `<img src="/iconimage/IconAmazonGreenwize.png"/>`,
                amazonavasupplies: `<img src="/iconimage/IconAmazonAVASupplies.png"/>`,
                ebaygreenwize: `<svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" width="35" height="35" viewBox="0 0 48 48" style="padding-bottom: 3px;">
                        <path fill="#f44336" d="M6,19c-6.002-0.001-6.029,4.529-5.998,5.704c0,0-0.294,5.296,6.058,5.296c5.458,0,5.726-3.323,5.726-3.323l-2.51,0.005c0,0-0.489,1.831-3.205,1.781C2.579,28.4,2.443,25,2.443,25H12C12,24.999,12.643,19.001,6,19z M2.523,23.515c0,0,0.172-2.965,3.624-2.966c3.44-0.001,3.44,2.966,3.44,2.966H2.523z"></path><path fill="#1976d2" d="M18.825,19c-3.058-0.017-4.374,1.719-4.374,1.719V15H12v15h2.316l0.102-1.735c0,0,1.111,1.735,4.356,1.735c3.246,0,5.809-1.898,5.878-5.416C24.719,21.064,21.884,19.016,18.825,19z M18.264,28.431c-3.862,0.046-3.799-3.888-3.799-3.888s-0.141-3.873,3.793-3.97c3.933-0.097,3.875,4.051,3.875,4.051S22.126,28.384,18.264,28.431z"></path><path fill="#8bc34a" d="M34.437 19L37.243 19 41.349 27.185 45.463 19 48 19 40.573 34 37.859 34 40.009 29.537z"></path><path fill="#ffc107" d="M30.724,19.017c0,0-4.883-0.416-5.544,2.983h2.588c0.132-0.415,0.674-1.469,2.785-1.431c2.484,0.044,2.937,1.003,2.923,2.431c0,0-2.129,0.006-2.84,0.009c-1.28,0.006-5.761,0.345-6.179,2.945c-0.498,3.093,2.399,4.058,4.666,4.045c2.266-0.012,3.559-0.659,4.52-1.818l0.103,1.83L36,30v-6.805C35.936,22.032,36,19.224,30.724,19.017z M29.546,28.511c0,0-2.456,0.003-2.6-1.867c-0.154-1.996,3.778-2.078,3.778-2.078l2.778-0.003C33.501,24.564,33.951,28.567,29.546,28.511z"></path>
                        </svg>`,
                onbuygreenwize: `<svg version="1.1" xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 32 32" style="padding-bottom: 4px;">
                        <path d="M0 0 C10.56 0 21.12 0 32 0 C32 10.56 32 21.12 32 32 C21.44 32 10.88 32 0 32 C0 21.44 0 10.88 0 0 Z " fill="#3769CD" transform="translate(0,0)"/>
                        <path d="M0 0 C0.99 1.32 1.98 2.64 3 4 C5.29738569 6.85192706 6.26760483 7.89091987 9.9375 8.4375 C13.29987194 7.95716115 15.24591819 6.94405774 18 5 C18 6.32 18 7.64 18 9 C19.65 9 21.3 9 23 9 C23 6.36 23 3.72 23 1 C23.99 1 24.98 1 26 1 C26 3.64 26 6.28 26 9 C27.65 9 29.3 9 31 9 C31 6.36 31 3.72 31 1 C31.33 1 31.66 1 32 1 C32 6.28 32 11.56 32 17 C21.44 17 10.88 17 0 17 C0 11.39 0 5.78 0 0 Z " fill="#3466CC" transform="translate(0,15)"/>
                        <path d="M0 0 C3.80484394 0.71340824 5.4511805 1.6388541 8 4.5625 C8.625 8 8.625 8 8 11.5625 C5.55401113 14.94371991 4.10703441 16.33186783 0 17.1875 C-4.0743356 16.33868008 -5.54405875 14.88524404 -8 11.5625 C-8.625 8.5625 -8.625 8.5625 -8 5.5625 C-5.53959272 2.23371368 -4.10389613 0.76948052 0 0 Z " fill="#F2F5FB" transform="translate(10,7.4375)"/>
                        <path d="M0 0 C1 1 1 1 1.09765625 3.28515625 C1.08605469 4.20167969 1.07445312 5.11820313 1.0625 6.0625 C1.05347656 6.98160156 1.04445313 7.90070312 1.03515625 8.84765625 C1.02355469 9.55792969 1.01195312 10.26820312 1 11 C-0.32 11 -1.64 11 -3 11 C-3 8.36 -3 5.72 -3 3 C-3.99 3 -4.98 3 -6 3 C-6 5.64 -6 8.28 -6 11 C-7.32 11 -8.64 11 -10 11 C-10 7.37 -10 3.74 -10 0 C-5.66473162 -0.86705368 -4.00869538 -1.11352649 0 0 Z " fill="#E8EDF9" transform="translate(29,13)"/>
                        <path d="M0 0 C1.99954746 -0.04254356 4.00041636 -0.04080783 6 0 C7 1 7 1 7.125 4 C7 7 7 7 6 8 C4.00041636 8.04080783 1.99954746 8.04254356 0 8 C-1.125 2.25 -1.125 2.25 0 0 Z " fill="#3B6CCE" transform="translate(7,12)"/>
                        <path d="M0 0 C1.67542976 0.28604898 3.34385343 0.61781233 5 1 C5 4.3 5 7.6 5 11 C3.68 11 2.36 11 1 11 C1 8.03 1 5.06 1 2 C0.34 1.67 -0.32 1.34 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z " fill="#F0F4FB" transform="translate(25,13)"/>
                        </svg>`,
                shopifygreenwize: `<svg width="18px" height="18px" viewBox="-18 0 292 292" xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="xMidYMid" style="padding-bottom: 4px;">
                          <path d="M223.774 57.34c-.201-1.46-1.48-2.268-2.537-2.357-1.055-.088-23.383-1.743-23.383-1.743s-15.507-15.395-17.209-17.099c-1.703-1.703-5.029-1.185-6.32-.805-.19.056-3.388 1.043-8.678 2.68-5.18-14.906-14.322-28.604-30.405-28.604-.444 0-.901.018-1.358.044C129.31 3.407 123.644.779 118.75.779c-37.465 0-55.364 46.835-60.976 70.635-14.558 4.511-24.9 7.718-26.221 8.133-8.126 2.549-8.383 2.805-9.45 10.462C21.3 95.806.038 260.235.038 260.235l165.678 31.042 89.77-19.42S223.973 58.8 223.775 57.34zM156.49 40.848l-14.019 4.339c.005-.988.01-1.96.01-3.023 0-9.264-1.286-16.723-3.349-22.636 8.287 1.04 13.806 10.469 17.358 21.32zm-27.638-19.483c2.304 5.773 3.802 14.058 3.802 25.238 0 .572-.005 1.095-.01 1.624-9.117 2.824-19.024 5.89-28.953 8.966 5.575-21.516 16.025-31.908 25.161-35.828zm-11.131-10.537c1.617 0 3.246.549 4.805 1.622-12.007 5.65-24.877 19.88-30.312 48.297l-22.886 7.088C75.694 46.16 90.81 10.828 117.72 10.828z" fill="#95BF46"/><path d="M221.237 54.983c-1.055-.088-23.383-1.743-23.383-1.743s-15.507-15.395-17.209-17.099c-.637-.634-1.496-.959-2.394-1.099l-12.527 256.233 89.762-19.418S223.972 58.8 223.774 57.34c-.201-1.46-1.48-2.268-2.537-2.357" fill="#5E8E3E"/><path d="M135.242 104.585l-11.069 32.926s-9.698-5.176-21.586-5.176c-17.428 0-18.305 10.937-18.305 13.693 0 15.038 39.2 20.8 39.2 56.024 0 27.713-17.577 45.558-41.277 45.558-28.44 0-42.984-17.7-42.984-17.7l7.615-25.16s14.95 12.835 27.565 12.835c8.243 0 11.596-6.49 11.596-11.232 0-19.616-32.16-20.491-32.16-52.724 0-27.129 19.472-53.382 58.778-53.382 15.145 0 22.627 4.338 22.627 4.338" fill="#FFF"/>
                          </svg>`
            };

            const modifiedData = data.map((row, index) => {
                const mappingSKUs = row.mappingSKU.split(',').map(sku => sku.trim());
                const marketplaces = row.salesChannel.split(',').map(market => market.trim());

                // Combine mappingSKUs with their corresponding marketplace and icon
                const mappedSKUsWithIcons = mappingSKUs.map((sku, idx) => {

                    const market = marketplaces[idx] ? marketplaces[idx].trim().replace(/\s+/g, '') : '';;
                    const icon = marketplaceIcons[market] || '';
                    return `${icon}${sku}`; // Combine SKU with marketplace and icon
                }).join(', '); // Join them back into a string

                return [
                    index + 1,
                    row.masterSKU,
                    row.title,
                    mappedSKUsWithIcons // Display SKUs with marketplaces and icons
                    //,row.idMasterSKU
                ];
            });

            _MasterSkuDatatable = new DataTable("#simple-table", {
                type: "string",
                data: {
                    headings: ["#", "Master SKU", "Title", "Marketplace SKU"],
                    //headings: ["#", "Master SKU", "Title", "Marketplace SKU", "Action"],
                    data: modifiedData
                },
                perPage: 20,  // Set the default number of records per page
                perPageSelect: [20, 40, 60],
                columns: [
                    { select: 0, sortable: true },
                    { select: 1, sortable: true,
                        render: (value) => `<p><a href="${showSkuBaseUrl}?sku=${value}" title="Click to Show Master SKU Details" target="_blank">${value || ""}</a></p>`
                    },
                    {
                        select: 2, sortable: true,
                        render: (value) => `<p class="title">${value || ""}</p>`
                    },
                    {
                        select: 3, sortable: true,
                        render: (value) => `<p class="mappingsku">${value || ""}</p>`
                    }
                    // ,{
                    //     select: 4, sortable: false,
                    //     render: (value) => `<button class="btn btn-primary mr-2 edit" title="Edit Mapping" id='${value}' ><i class="bi bi-pencil-square edit"></i></button>`
                    // }
                ]
            });

            // _MasterSkuDatatable.dom.addEventListener("click", handleTableEditClick);

            var searchDiv = document.querySelector(".datatable-search");
            var button = document.createElement("button");
            button.innerText = "Export Excel";
            button.type = "button";
            button.id = "export-excel-button";
            button.className = "btn btn-secondary";
            button.style.marginBottom = "3px";
            button.onclick = function () {

                let searchIds = [];
                if (_MasterSkuDatatable.totalPages > 0) {
                    searchIds = _MasterSkuDatatable.pages.map(group =>
                        group.map(item =>
                            item.row.cells[0].text // Extract only the first value
                        )
                    ).flat();
                }

                let excelData = _MasterSkuData.filter(record => searchIds.map(Number).includes(record[0]));

                // Export to Excel functionality
                const combinedArray = [["#", "Master SKU", "Title", "Marketplace SKU"], ...excelData];
                const ws = XLSX.utils.aoa_to_sheet(combinedArray);
                const wb = XLSX.utils.book_new();
                XLSX.utils.book_append_sheet(wb, ws, 'Sheet1');
                const wbout = XLSX.write(wb, { bookType: 'xlsx', type: 'binary' });
                saveAs(new Blob([s2ab(wbout)], { type: "application/octet-stream" }), 'Mapping SKUs.xlsx');
            };
            searchDiv.appendChild(button);

            // var addButton = document.createElement("button");
            // addButton.innerText = "Add";
            // addButton.type = "button";
            // addButton.title = "Add Marketplace SKU Mapping"
            // addButton.id = "mapping_add_button";
            // addButton.className = "btn btn-primary";
            // addButton.style.marginBottom = "3px";
            // addButton.style.marginLeft = "5px";
            // addButton.onclick = function () {   //Open modal on add button click

            //     document.getElementById('modal_title').innerHTML = 'Add Marketplace SKU Mapping';

            //     _MasterSkuId = null;

            //     document.getElementById("modal_master_sku").value = '';
            //     document.getElementById("modal_master_sku").disabled = false;
            //     const myModal = new bootstrap.Modal(document.getElementById('verticalycentered'));
            //     myModal.show();

            //     //For autosearch suggestion
            //     $.ajax({
            //         type: "GET",
            //         url: "@Url.Action("GetMSTInventorySku", "InventorySync")",
            //         dataType: "json",
            //         success: function (response) {
            //             $('.typeahead_mastersku').typeahead({
            //                 source: response
            //             });
            //         },
            //         failure: function (response) {
            //             console.error(response.responseText);
            //         },
            //         error: function (response) {
            //             console.error(response.responseText);
            //         }
            //     });

            //     GenerateMappingSkuModalTable([], 'dataload')
            // };
            // searchDiv.appendChild(addButton);

            if (sku || marketSku) {

                if (sku){
                    var searchBox = document.querySelector(".datatable-input");
                    searchBox.value = sku;
                }
                var clearButton = document.createElement("button");
                clearButton.innerText = "Clear Filter";
                clearButton.type = "button";
                clearButton.title = "Clear filters"
                clearButton.id = "clearFilterBtn";
                clearButton.className = "btn btn-secondary";
                clearButton.style.marginBottom = "3px";
                clearButton.style.marginLeft = "5px";
                clearButton.onclick = function () {
                    // Remove URL parameters using history.replaceState to keep the page without reloading
                    let url = new URL(window.location.href); // Get the current URL
                    url.search = ""; // Clear the search parameters (URL parameters)
                    history.replaceState(null, "", url.toString()); // Replace the current URL with the updated one

                    // Reload the page with the new URL (without parameters)
                    location.reload();
                };
                //clearButton.style.display = "none";
                searchDiv.appendChild(clearButton);
            }
        }

        // // Function to generate a sample Excel of Mapping SKUs
        // $("#sample-download-button").click(function (e) {
        //     e.preventDefault();

        //     const wb = XLSX.utils.book_new();
        //     const ws = XLSX.utils.aoa_to_sheet([
        //         ['Master SKU', 'Mapping Type', 'SKU', 'Quantity', 'Sync On/Off'],
        //         ['APPARELSKU', 'Amazon Greenwize', 'MSKU21', '1', 'True'],
        //         ['APPARELSKU', 'eBay Greenwize', 'APPAREL-002', '1', 'False'],
        //         ['SONYSKU', 'eBay Greenwize', 'SONY-PS5', '2', 'True'],
        //         ['P123SKU', 'OnBuy Greenwize', 'P123-XS', '1', 'False'],
        //         ['ELECSKU', 'Amazon Greenwize', 'ELEC-ASQWERT5', '1', 'False'],
        //         ['GW0002', 'Amazon AVA Supplies', 'EA12', '4', 'False']
        //     ]);
        //     XLSX.utils.book_append_sheet(wb, ws, 'Sheet1');
        //     const wbout = XLSX.write(wb, { bookType: 'xlsx', type: 'binary' });
        //     const blob = new Blob([s2ab(wbout)], { type: 'application/octet-stream' });
        //     const link = document.createElement('a');
        //     link.href = URL.createObjectURL(blob);
        //     link.download = 'Mapping SKU Sample.xlsx';
        //     link.click();
        // });

        /**
        * Handles the click event on a edit action button
        * @@param {Event} event - The click event
        */
        // function handleTableEditClick(event) {
        //     if (event.target.matches("button.edit") || event.target.matches("i.edit")) {
        //         event.preventDefault();
        //         event.stopPropagation();

        //         const masterSkuId = event.target.closest("tr").querySelector("button").id;
        //         const masterSku = event.target.closest("tr").querySelectorAll("td")[1].textContent;

        //         _MasterSkuId = masterSkuId;
        //         _IsAnyRecordDeleted = false;

        //         document.getElementById('modal_title').innerHTML = 'Update Marketplace SKU Mapping';
        //         document.getElementById("modal_master_sku").value = masterSku;
        //         document.getElementById("modal_master_sku").disabled = true;

        //         const myModal = new bootstrap.Modal(document.getElementById('verticalycentered'));
        //         myModal.show();

        //         GetMappingSkuList(masterSkuId);
        //     }
        // }

        /**
        * Fetches the list of mapping SKUs for a given master SKU ID and displays it in a modal
        * @@param {number} masterSkuId - The master SKU ID
        */
        // function GetMappingSkuList(masterSkuId) {

        //     $('#mapping-loading-spinner').show();
        //     $.ajax({
        //         type: "GET",
        //         url: "@Url.Action("GetMappingSkuList", "MappingSKU")",
        //         data: { masterSkuId: masterSkuId },
        //         dataType: "json",
        //         success: function (response) {
        //             $('#mapping-loading-spinner').hide();
        //             if (response.error) {
        //                 toastr.error(response.message);
        //             } else {
        //                 GenerateMappingSkuModalTable(response.result, 'dataload');
        //             }
        //         },
        //         failure: handleAjaxError,
        //         error: handleAjaxError
        //     });
        // }       

        /**
         * Deletes a mapping SKU and refreshes the modal table
         * @@param {number} idMappingSKU - The ID of the mapping SKU to delete
         */
        // function DeleteMappingSku(idMappingSKU) {
        //     Swal.fire({
        //         title: 'Are you sure?',
        //         text: "You won't be able to revert this!",
        //         icon: 'warning',
        //         showCancelButton: true,
        //         confirmButtonColor: '#3085d6',
        //         cancelButtonColor: '#d33',
        //         confirmButtonText: 'Yes, delete it!'
        //     }).then((result) => {
        //         if (result.isConfirmed) {
        //             //
        //             $.ajax({
        //                 type: "POST",
        //                 url: "@Url.Action("DeleteMappingSku", "MappingSKU")",
        //                 data: { idMappingSKU: idMappingSKU },
        //                 success: function (response) {
        //                     if (response.error) {
        //                         Swal.fire(
        //                             'Error!',
        //                             response.message,
        //                             'error'
        //                         );
        //                     } else {
        //                         Swal.fire(
        //                             'Deleted!',
        //                             response.message,
        //                             'success'
        //                         );
        //                         _IsAnyRecordDeleted = true;
        //                         GetMappingSkuList(_MasterSkuId);
        //                     }
        //                 },
        //                 error: function (error) {
        //                     Swal.fire(
        //                         'Error!',
        //                         'Failed to delete record.',
        //                         'error'
        //                     );
        //                 }
        //             });
        //         } else if (result.dismiss === Swal.DismissReason.cancel) {
        //             Swal.fire({
        //                 title: 'Cancelled',
        //                 text: 'Your record is safe :)',
        //                 icon: 'error',
        //                 customClass: {
        //                     confirmButton: 'btn btn-success waves-effect waves-light'
        //                 }
        //             });
        //         }
        //     });
        // }

        /**
         * Generates the DataTable for mapping SKUs in the modal
         * @@param {Array} result - The mapping SKU data
         */
        // let mappedData = [];
        // function GenerateMappingSkuModalTable(result, eventType) {
        //     if (_MappingDatatable) {
        //         _MappingDatatable.destroy();
        //     }

        //     _MappingSkuData = result;

        //     const idMappingSKUData = result.map(row => [row.idMappingSKU]);

        //     // Add/Edit button click time
        //     if (eventType == 'dataload') {               
        //         mappedData = result.map((row, index) => {
        //             let containsSingleQuote = row.sku.includes("'");

        //             let inputHTML = `<input type="text" class="form-control" style="width:150px" value='${row.sku}' required/>`;
        //             if (containsSingleQuote){
        //                 inputHTML = `<input type="text" class="form-control" style="width:150px" value="${row.sku}" required/>`;
        //             }

        //             let inputHTMLQty = `<input type="number" class="form-control" style="width:150px" value="${row.quantity || 1}" min="1" required />`;

        //             let inputHTMLSyncToggle = `<div class="form-check form-switch mt-2">
        //                 <input class="form-check-input" type="checkbox" title="Click to turn on/off sync process" id="${row.idMappingSKU}"
        //                     style="cursor: pointer;" onclick="toggleOnOff(this.id)" ${row.isSyncProcessEnable ? "checked" : ""}>
        //                 <label class="form-check-label" for="${row.idMappingSKU}"></label>
        //             </div>`;

        //             const buttonHTML = `<button class="btn btn-danger delete" title="Remove" style="margin-top:4px;" id="${row.idMappingSKU}" ><i class="bi bi-trash"></i></button>`;
        //             return [
        //                 createSelectElement(row.mappingType),
        //                 inputHTML,
        //                 inputHTMLQty,
        //                 inputHTMLSyncToggle,
        //                 buttonHTML
        //             ];
        //         });

        //     } else {
        //         mappedData = result;    //New row add time
        //     }

        //     if (eventType != 'remove') {
        //         let tableLastRow = [
        //             ` `,
        //             ``,
        //             ``,
        //             ``,
        //             `<button class="btn btn-success add" style="margin-top:4px;" title="Add SKU"><i class="bi bi-plus-square"></i></button>`
        //         ];
        //         mappedData.push(tableLastRow);
        //     }
            
        //     _MappingDatatable = new DataTable("#sku_simple_table", {
        //         type: "string",
        //         data: {
        //             headings: ["Mapping Type", "SKU", "Quantity", "Sync On/Off", "Action"],
        //             data: mappedData
        //         },
        //         paging : false,
        //         columns: [
        //             {
        //                 select: 0, sortable: false,
        //                 render: (value) => value
        //             },
        //             {
        //                 select: 1, sortable: false,
        //                 render: (value) => value
        //             },
        //             {
        //                 select: 2, sortable: false,
        //                 render: (value) => value
        //             },
        //             {
        //                 select: 3, sortable: false,
        //                 render: (value) => value
        //             },
        //             {
        //                 select: 4, sortable: false, render: (value) => value
        //             }
        //         ]
        //     });

        //     _MappingDatatable.dom.addEventListener("click", handleButtonClick);
        //     _MappingDatatable.dom.addEventListener("input", handleInput);

        // }

        /**
         * Handles the click event on the modal
         * @@param {Event} event - The click event
         */
        // function handleButtonClick(event) {
        //     if (event.target.matches("tbody button.delete") || event.target.matches("tbody button.delete i")) { // Delete button click event
        //         event.preventDefault();
        //         event.stopPropagation();

        //         const idMappingSKU = event.target.closest("tr button").id;
        //         DeleteMappingSku(idMappingSKU);

        //     } else if (event.target.matches("tbody button.add") || event.target.matches("tbody button.add i")) {    // Add button click event
        //         event.preventDefault();
        //         event.stopPropagation();

        //         let tableLastRow = [
        //             ` <select class="form-select" style="width:150px" id="marketplace">
        //                                                       <option value="amazon Greenwize">Amazon Greenwize</option>
        //                                                       <option value="amazon AVA Supplies">Amazon AVA Supplies</option>
        //                                                       <option value="ebay Greenwize">eBay Greenwize</option>
        //                                                       <option value="onbuy Greenwize">OnBuy Greenwize</option>
        //                                                       <option value="shopify Greenwize">Shopify Greenwize</option>
        //                                                      </select>`,
        //             `<input type="text" class="form-control" style="width:150px" id="mapping_sku" required/>`,
        //             `<input type="number" class="form-control" style="width:150px" id="qty" value="1" min="1" required />`,
        //             `<div class="form-check form-switch mt-2"> <input class="form-check-input" type="checkbox"
        //                     title="Click to turn on/off sync process" style="cursor: pointer;">
        //                     <label class="form-check-label"></label>
        //             </div>`,
        //             `<button class="btn btn-danger remove" title="Remove" style="margin-top:4px;"><i class="bi bi-trash"></i></button>`
        //         ];
                
        //         const newIndex = mappedData.length;
        //         mappedData[newIndex - 1] = tableLastRow;                

        //         GenerateMappingSkuModalTable(mappedData, "insert")

        //     } else if (event.target.matches("tbody button.remove") || event.target.matches("tbody button.remove i")) {   // Row remove event
        //         let indexToRemove = event.target.closest("tr").getAttribute('data-index');

        //         //Remove the element at the specified index
        //         if (indexToRemove > -1 && indexToRemove < mappedData.length) {
        //             mappedData.splice(indexToRemove, 1);
        //         }

        //         GenerateMappingSkuModalTable(mappedData, "remove")
        //     }
        // }        

        // Function to update dropdown select value & input value on array
        // function handleInput(event) {

        //     // Index of the element to be updated
        //     let indexToUpdate = event.target.closest("tr").getAttribute('data-index');
        //     if (event.target.matches("select")) {
        //         let selectedValue = event.target.value;

        //         const selectElement = createSelectElement(selectedValue);
        //         mappedData[indexToUpdate][0] = selectElement;

        //         _MappingDatatable.data.data[indexToUpdate].cells[0].data = selectElement;
        //     } else if (event.target.matches("input")) {
        //         const row = event.target.closest("tr");
        //         const inputType = event.target.type;

        //         if (inputType === "text") {
        //             let selectedValue = event.target.value;
        //             const inputElement = `<input type="text" class="form-control" style="width:150px" value="${selectedValue}" />`;

        //             mappedData[indexToUpdate][1] = inputElement;
        //             _MappingDatatable.data.data[indexToUpdate].cells[1].data = inputElement;
        //         }
        //         else if (inputType === "number") {
        //             const quantityValue = parseInt(event.target.value) || 1;  // Default to 1 if blank or invalid

        //             const inputQuantity = `<input type="number" class="form-control" style="width:150px" value="${quantityValue}" min="1" />`;

        //             mappedData[indexToUpdate][2] = inputQuantity;
        //             _MappingDatatable.data.data[indexToUpdate].cells[2].data = inputQuantity;
        //         }
        //         else if (inputType === "checkbox") {
        //             const isChecked = event.target.checked;
        //             const id = event.target.id || `toggle-${indexToUpdate}`;

        //             const toggleHTML = `<div class="form-check form-switch mt-2">
        //                 <input class="form-check-input" type="checkbox" title="Click to turn on/off sync process" id="${id}"
        //                     style="cursor: pointer;" onclick="toggleOnOff(this.id)" ${isChecked ? "checked" : ""}>
        //                 <label class="form-check-label" for="${id}"></label>
        //             </div>`;

        //             mappedData[indexToUpdate][3] = toggleHTML;
        //             _MappingDatatable.data.data[indexToUpdate].cells[3].data = toggleHTML;
        //         }
        //     }          
        // }

        /**
        * Handles the click event on the submit button in the modal
        */
        // function AddMappingSKU() {
        //     let modalMasterSkuInput = document.getElementById("modal_master_sku").value.trim()

        //     let extractedValues = extractValues(mappedData);

        //     let payload = {
        //         idMasterSKU: _MasterSkuId,
        //         masterSKU: modalMasterSkuInput,
        //         data: extractedValues
        //     };

        //     $.ajax({
        //         type: "POST",
        //         url: "@Url.Action("AddMappingSku", "MappingSKU")",
        //         contentType: 'application/json',
        //         data: JSON.stringify(payload),
        //         success: function (response) {
        //             if (response.error) {
        //                 toastr.error(response.message);
        //             } else {
        //                 document.getElementById("modal_master_sku").disabled = true;
        //                 document.getElementById('modal_title').innerHTML = 'Update Marketplace SKU Mapping';
        //                 toastr.info(response.message);
        //                 _IsAnyRecordInserted = true;
        //                 _MasterSkuId = response.id;
        //                 GetMappingSkuList(response.id);
        //             }
        //         },
        //         failure: handleAjaxError,
        //         error: handleAjaxError
        //     });
        // }
       
        // Update table data when modal is closed and sku is deleted from modal list
        // document.getElementById('verticalycentered').addEventListener('hidden.bs.modal', function () {

        //     $('.typeahead_mastersku').typeahead('destroy');

        //     const formMapping = document.querySelector('#form_mapping');
        //     formMapping.classList.remove('was-validated');
        //     formMapping.reset();

        //     if (_IsAnyRecordDeleted || _IsAnyRecordInserted) {
        //         GetMasterSkuData();
        //     }

        //     if (_MappingDatatable) {
        //         _MappingDatatable.destroy();
        //     }
        // });

        // Utils
        // function createSelectElement(selectedValue) {
        //     return `
        //                 <select class="form-select" style="width:150px">
        //                     <option value="amazon Greenwize" ${selectedValue === 'amazon Greenwize' ? 'selected' : ''}>Amazon Greenwize</option>
        //                     <option value="amazon AVA Supplies" ${selectedValue === 'amazon AVA Supplies' ? 'selected' : ''}>Amazon AVA Supplies</option>
        //                     <option value="ebay Greenwize" ${selectedValue === 'ebay Greenwize' ? 'selected' : ''}>eBay Greenwize</option>
        //                     <option value="onbuy Greenwize" ${selectedValue === 'onbuy Greenwize' ? 'selected' : ''}>OnBuy Greenwize</option>
        //                     <option value="shopify Greenwize" ${selectedValue === 'shopify Greenwize' ? 'selected' : ''}>Shopify Greenwize</option>
        //                 </select>
        //             `;
        // }

        // Function to extract values
        // function extractValues(elementsArray) {
        //     // Get the table body
        //     let tableBody = document.querySelector('#sku_simple_table tbody');

        //     // Initialize an array to hold the extracted values
        //     let values = [];

        //     // Iterate through each row in the table body
        //     tableBody.querySelectorAll('tr').forEach(row => {
        //         // Find the <select> and <input> elements within the row
        //         let selectElement = row.querySelector('select');
        //         let inputElement = row.querySelector('input[type = "text"]');
        //         let quantityElement = row.querySelector('input[type = "number"]');
        //         let toggleElement = row.querySelector('input[type="checkbox"]');
        //         let buttonElement = row.querySelector('button');

        //         // Extract their values
        //         let selectValue = selectElement ? selectElement.value : null;
        //         let inputValue = inputElement ? inputElement.value : null;
        //         let quantity = quantityElement ? parseInt(quantityElement.value) || 0 : 0;
        //         let isSyncProcessEnable = toggleElement ? toggleElement.checked : false;
        //         let buttonValue = buttonElement ? buttonElement.getAttribute('id') : null;

        //         // Add the values to the array
        //         values.push({ selectValue, inputValue, quantity, isSyncProcessEnable, idMappingSKU: buttonValue });
        //     });

        //     return values;
        // }

        // Utility function to convert data to array buffer
        function s2ab(s) {
            const buf = new ArrayBuffer(s.length);
            const view = new Uint8Array(buf);
            for (let i = 0; i < s.length; i++) {
                view[i] = s.charCodeAt(i) & 0xff;
            }
            return buf;
        }     
       
         // jQuery script to show full title on hover
        $(document).on('mouseenter', '.mappingsku, .title', function () {
            const $this = $(this);  
            if ($this.width() < $this[0].scrollWidth) {
                $this.css('white-space', 'normal');
            }
        });

        $(document).on('mouseleave', '.mappingsku, .title', function () {
            const $this = $(this);
            $this.css('white-space', 'nowrap');
        });

    </script>

    @* <script>

        //Sync ON/Off and update it.
        const toggleOnOff = (toggleId) => {

            // Get the checkbox element by its ID
            var checkbox = document.getElementById(toggleId);

            // Check the new checked state of the checkbox
            var isToggle = checkbox.checked;

            let data = { isToggle: isToggle, idMappingSKU: toggleId }         
        }
    </script> *@

}